using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using NSDMasterInventory.io;
using NSDMasterInventory.item;
using NSDMasterInventory.ui;

namespace NSDMasterInventory
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class MainWindow
	{
		public static List<List<Item<string>>> originalItemLists = new List<List<Item<string>>>();
		public static volatile List<DataTable> MasterData = new List<DataTable>();
		public static bool viewItemsInventoried;
		private string name = "";

		public MainWindow()
		{
			InitializeComponent();

			viewItemsInventoried = false;
			foreach (string file in Directory.GetFiles(App.DatabaseDirectory))
			{
				//Console.WriteLine(file);
				//System.out.println(file.getPath());
				var tab = new TabItem();
				tab.Header = Path.GetFileNameWithoutExtension(file);
				name = tab.Header.ToString();

				tabControl.Items.Add(tab);
				WriteToDataGrid(file, tab);
			}

			EventManager.RegisterClassHandler(typeof(DatePicker),
				DatePicker.LoadedEvent,
				new RoutedEventHandler(DatePicker_Loaded));

			ViewItemsInventoriedSetter();
		}

		private void SetViewItemsInventoried(object sender, System.Windows.RoutedEventArgs e)
		{
			ViewItemsInventoriedSetter();
		}

		private void ViewItemsInventoriedSetter()
		{
			viewItemsInventoried = (bool) viewInventoried.IsChecked;

			/*
			foreach (DataTable table in MasterData)
			{
				foreach (DataRow row in table.Rows)
				{
					foreach (var v in row.ItemArray)
					{
						Console.WriteLine(v);
					}
				}
			}*/

			markItemsInventoried.IsEnabled = viewItemsInventoried;
			markItemsNotInventoried.IsEnabled = viewItemsInventoried;
		}

		private void WriteToDataGrid(string file, TabItem tab)
		{
			try
			{
				int sheetIndex = tabControl.Items.IndexOf(tab);

				string prefab = App.GetPrefabFromDatabase(file);
				MasterData.Add(App.ToDataTable(App.GetItems(file, prefab), prefab));

				DataGrid dataGrid = new DataGrid();
				dataGrid.AutoGenerateColumns = true;

				dataGrid.AutoGeneratedColumns += (sender, args) =>
				{
					Prop prop = App.GetProp(prefab, "Types");

					for (int i = 0; i < dataGrid.Columns.Count; i++)
					{
						//Console.WriteLine(prop.Get("field" + i));
						DataGridColumn column = dataGrid.Columns[i];
						if (prop.Get("field" + i).ToLower().Equals("combobox"))
						{
							column = new DataGridComboBoxColumn();
							column.Header = dataGrid.Columns[i].Header;
							Binding textBinding = new Binding(dataGrid.Columns[i].Header.ToString());
							textBinding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
							textBinding.Mode = BindingMode.TwoWay;
							textBinding.BindsDirectlyToSource = true;
							((DataGridComboBoxColumn) column).TextBinding = textBinding;

							ComboBox comboBox = new ComboBox();
							comboBox.IsEditable = true;

							Prop comboBoxProp = App.GetComboBoxProp(prefab, i);
							List<string> comboStrings = new List<string>();
							for (int j = 0; j < comboBoxProp.Count; j++)
							{
								comboStrings.Add(comboBoxProp.Get("comboChoice" + j));
							}

							((DataGridComboBoxColumn) column).ItemsSource = comboStrings;

							Style style = new Style(comboBox.GetType());
							DependencyProperty property = ComboBox.IsEditableProperty;
							Setter setter = new Setter(property, true);
							//Console.WriteLine(setter.Value);
							style.Setters.Add(setter);

							((DataGridComboBoxColumn) column).EditingElementStyle = style;
							dataGrid.Columns[i] = column;
						}
						else if (prop.Get("field" + i).ToLower().Equals("datepicker"))
						{
							column = new DataGridTextColumn();
							column.Header = dataGrid.Columns[i].Header;

							DatePicker datePicker = new DatePicker();
							Style style = new Style(datePicker.GetType());
							DependencyProperty property = DatePicker.SelectedDateFormatProperty;
							Setter setter = new Setter(property, DatePickerFormat.Long);
							style.Setters.Add(setter);
							datePicker.Style = style;
							datePicker.KeyDown += (o, eventArgs) =>
							{
								if (eventArgs.Key == Key.Enter)
									datePicker.Text = DateTime.Now.ToShortDateString();
							};

							FrameworkElementFactory datePickerFactoryElem = new FrameworkElementFactory(datePicker.GetType());

							Binding dateBind = new Binding(dataGrid.Columns[i].Header.ToString());
							dateBind.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
							dateBind.Mode = BindingMode.TwoWay;
							dateBind.BindsDirectlyToSource = true;

							datePickerFactoryElem.SetValue(DatePicker.SelectedDateProperty, dateBind);
							datePickerFactoryElem.SetValue(DatePicker.DisplayDateProperty, dateBind);

							DataTemplate cellTemplate = new DataTemplate(datePicker.GetType());
							cellTemplate.VisualTree = datePickerFactoryElem;
							((DataGridTextColumn) column).EditingElementStyle = style;
							dataGrid.Columns[i] = column;
						}
						else if (prop.Get("field" + i).ToLower().Equals("checkbox"))
						{
							column = new DataGridCheckBoxColumn();
							column.Header = dataGrid.Columns[i].Header;
							Binding checkBoxBinding = new Binding(dataGrid.Columns[i].Header.ToString());
							checkBoxBinding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
							checkBoxBinding.Mode = BindingMode.TwoWay;
							checkBoxBinding.BindsDirectlyToSource = true;
							((DataGridCheckBoxColumn) column).Binding = checkBoxBinding;
							dataGrid.Columns[i] = column;
						}
					}
				};
				DataTable table = MasterData[sheetIndex];
				dataGrid.ItemsSource = table.DefaultView;

				dataGrid.LoadingRow += OnLoadingRow;

				dataGrid.SelectionUnit = DataGridSelectionUnit.CellOrRowHeader;
				dataGrid.SelectionMode = DataGridSelectionMode.Extended;
				dataGrid.CanUserSortColumns = false;
				dataGrid.CanUserReorderColumns = false;
				dataGrid.IsEnabled = true;

				//dataGrid.Loaded += (s, o) => { Console.WriteLine(dataGrid.Columns.Count.ToString()); };

				//addListeners(dataGrid, sheetIndex);

				//addFilter(dataGrid, sheetIndex);

				tab.Content = dataGrid;
			}
			catch (IOException e)
			{
				Console.WriteLine(e.Message);
			}
		}

		private void OnLoadingRow(object sender, DataGridRowEventArgs e)
		{
			e.Row.Header = (e.Row.GetIndex() + 1).ToString();
		}

		private void SearchFieldTextChanged(object sender, TextChangedEventArgs e)
		{
			foreach (DataTable table in MasterData)
			{
				try
				{
					table.DefaultView.RowFilter = string.Format("Category LIKE '{0}%'", searchField.Text.ToLower());
				}
				catch (Exception exception)
				{
					// ignored
				}
			}
		}

		private void DatePicker_Loaded(object sender, RoutedEventArgs e)
		{
			var dp = sender as DatePicker;
			if (dp == null) return;

			var tb = GetChildOfType<DatePickerTextBox>(dp);
			if (tb == null) return;

			var wm = tb.Template.FindName("PART_Watermark", tb) as ContentControl;
			if (wm == null) return;

			wm.Content = string.Empty;
		}

		public static T GetChildOfType<T>(DependencyObject depObj) where T : DependencyObject
		{
			if (depObj == null) return null;

			for (int i = 0; i < VisualTreeHelper.GetChildrenCount(depObj); i++)
			{
				var child = VisualTreeHelper.GetChild(depObj, i);

				var result = (child as T) ?? GetChildOfType<T>(child);
				if (result != null) return result;
			}

			return null;
		}
	}
}